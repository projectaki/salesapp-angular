"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type UserMetadata {
  darkMode: Boolean!
}

type Store {
  _id: String!
  name: String!
  logoUrl: String!
}

type StoreSubscription {
  _id: String!
  name: String
  logoUrl: String
}

type User {
  _id: String!
  name: String!
  email: String!
  subscriptions: [StoreSubscription!]!
  user_metadata: UserMetadata!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Product {
  _id: String!
  name: String!
  price: Int!
  previous_price: Int!
  created_at: DateTime!
  updated_at: DateTime!
  img_url: String
}

input UserMetadataInput {
  darkMode: Boolean!
}

type Query {
  user(id: String!): User!
  authUser: User
  stores: [Store!]!
  product(id: String!): Product!
}

type Mutation {
  createUser(input: UserCreateInput!): User!
  saveUser(input: UserUpdateInput!): User!
  createProduct(input: ProductCreateInput!): Product!
  updateProduct(input: ProductUpdateInput!): Product!
}

input UserCreateInput {
  _id: String!
  name: String!
  email: String!
}

input UserUpdateInput {
  _id: String
  name: String
  email: String
  user_metadata: UserMetadataInput
  subscriptions: [StoreSubscriptionInput!]
}

input StoreSubscriptionInput {
  _id: String
}

input ProductCreateInput {
  name: String!
  price: Int!
}

input ProductUpdateInput {
  name: String
  price: Int
  _id: String!
}
